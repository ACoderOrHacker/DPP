
// Generated from C:/Users/ACoder/D++/src/compiler/templates/DXXLexer.g4 by ANTLR 4.13.1


#include "DXXLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct DXXLexerStaticData final {
  DXXLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  DXXLexerStaticData(const DXXLexerStaticData&) = delete;
  DXXLexerStaticData(DXXLexerStaticData&&) = delete;
  DXXLexerStaticData& operator=(const DXXLexerStaticData&) = delete;
  DXXLexerStaticData& operator=(DXXLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag dxxlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
DXXLexerStaticData *dxxlexerLexerStaticData = nullptr;

void dxxlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (dxxlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(dxxlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<DXXLexerStaticData>(
    std::vector<std::string>{
      "Asm", "Bool", "Break", "Case", "Catch", "Char", "Class", "Continue", 
      "Default", "Delete", "Do", "Else", "Enum", "Extends", "False", "Final", 
      "Finally", "Float", "Foreach", "Goto", "If", "Import", "Inline", "Int", 
      "Implements", "Long", "Native", "New", "Null", "Object", "Operator", 
      "Override", "Private", "Protected", "Public", "Return", "Short", "Static", 
      "String", "Super", "Switch", "Template", "This", "Throw", "True", 
      "Try", "Typedef", "Virtual", "Void", "While", "LeftParen", "RightParen", 
      "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Arrow", 
      "Plus", "Minus", "Star", "Div", "Mod", "Caret", "And", "Or", "Tilde", 
      "Not", "Assign", "ColonAssign", "Less", "Greater", "PlusAssign", "MinusAssign", 
      "StarAssign", "DivAssign", "ModAssign", "XorAssign", "AndAssign", 
      "OrAssign", "LeftShiftAssign", "RightShiftAssign", "Equal", "NotEqual", 
      "LessEqual", "GreaterEqual", "AndAnd", "OrOr", "PlusPlus", "MinusMinus", 
      "Comma", "Question", "Colon", "Semi", "Dot", "Ellipsis", "LeftShift", 
      "RightShift", "ID", "Constructor", "Destructor", "NONZERODIGIT", "OCTALDIGIT", 
      "HEXADECIMALDIGIT", "Simpleescapesequence", "SIGN", "ESC", "Whitespace", 
      "Newline", "BlockComment", "LineComment", "IntegerData", "FloatingNumberData", 
      "StringData"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'asm'", "'bool'", "'break'", "'case'", "'catch'", "'char'", "'class'", 
      "'continue'", "'default'", "'delete'", "'do'", "'else'", "'enum'", 
      "'extends'", "'false'", "'final'", "'finally'", "'float'", "'foreach'", 
      "'goto'", "'if'", "'import'", "'inline'", "'int'", "'implements'", 
      "'long'", "'native'", "'new'", "'null'", "'object'", "'operator'", 
      "'override'", "'private'", "'protected'", "'public'", "'return'", 
      "'short'", "'static'", "'string'", "'super'", "'switch'", "'template'", 
      "'this'", "'throw'", "'true'", "'try'", "'typedef'", "'virtual'", 
      "'void'", "'while'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'=>'", 
      "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", "'~'", "", 
      "'='", "':='", "'<'", "'>'", "'+='", "'-='", "'*='", "'/='", "'%='", 
      "'^='", "'&='", "'|='", "'<<='", "'>>='", "'=='", "'!='", "'<='", 
      "'>='", "", "", "'++'", "'--'", "','", "'\\u003F'", "':'", "';'", 
      "'.'", "'...'", "'<<'", "'>>'", "", "'__constructor__'", "'__destructor__'"
    },
    std::vector<std::string>{
      "", "Asm", "Bool", "Break", "Case", "Catch", "Char", "Class", "Continue", 
      "Default", "Delete", "Do", "Else", "Enum", "Extends", "False", "Final", 
      "Finally", "Float", "Foreach", "Goto", "If", "Import", "Inline", "Int", 
      "Implements", "Long", "Native", "New", "Null", "Object", "Operator", 
      "Override", "Private", "Protected", "Public", "Return", "Short", "Static", 
      "String", "Super", "Switch", "Template", "This", "Throw", "True", 
      "Try", "Typedef", "Virtual", "Void", "While", "LeftParen", "RightParen", 
      "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Arrow", 
      "Plus", "Minus", "Star", "Div", "Mod", "Caret", "And", "Or", "Tilde", 
      "Not", "Assign", "ColonAssign", "Less", "Greater", "PlusAssign", "MinusAssign", 
      "StarAssign", "DivAssign", "ModAssign", "XorAssign", "AndAssign", 
      "OrAssign", "LeftShiftAssign", "RightShiftAssign", "Equal", "NotEqual", 
      "LessEqual", "GreaterEqual", "AndAnd", "OrOr", "PlusPlus", "MinusMinus", 
      "Comma", "Question", "Colon", "Semi", "Dot", "Ellipsis", "LeftShift", 
      "RightShift", "ID", "Constructor", "Destructor", "Whitespace", "Newline", 
      "BlockComment", "LineComment", "IntegerData", "FloatingNumberData", 
      "StringData"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,107,819,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
  	7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,
  	14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,
  	21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,
  	28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,
  	35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,
  	42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
  	49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,
  	56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,
  	63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,
  	70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,
  	77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,
  	84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,
  	91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
  	98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,
  	1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,
  	5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
  	1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,
  	1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
  	1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
  	1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
  	1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,
  	1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,
  	1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,
  	1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,
  	1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
  	1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,
  	1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,
  	1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
  	1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,
  	1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
  	1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,
  	1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
  	1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,
  	1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,
  	1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,
  	1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,66,
  	1,66,3,66,585,8,66,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,70,1,70,1,71,
  	1,71,1,71,1,72,1,72,1,72,1,73,1,73,1,73,1,74,1,74,1,74,1,75,1,75,1,75,
  	1,76,1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,80,
  	1,80,1,80,1,80,1,81,1,81,1,81,1,82,1,82,1,82,1,83,1,83,1,83,1,84,1,84,
  	1,84,1,85,1,85,1,85,1,85,1,85,3,85,645,8,85,1,86,1,86,1,86,1,86,3,86,
  	651,8,86,1,87,1,87,1,87,1,88,1,88,1,88,1,89,1,89,1,90,1,90,1,91,1,91,
  	1,92,1,92,1,93,1,93,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,96,1,96,1,96,
  	1,97,1,97,5,97,681,8,97,10,97,12,97,684,9,97,1,98,1,98,1,98,1,98,1,98,
  	1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,
  	1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,100,1,100,
  	1,101,1,101,1,102,1,102,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,3,103,744,8,103,1,103,3,103,747,8,103,1,103,1,103,1,103,1,103,3,
  	103,753,8,103,1,104,1,104,1,105,1,105,1,105,1,106,4,106,761,8,106,11,
  	106,12,106,762,1,106,1,106,1,107,1,107,3,107,769,8,107,1,107,3,107,772,
  	8,107,1,107,1,107,1,108,1,108,1,108,1,108,5,108,780,8,108,10,108,12,108,
  	783,9,108,1,108,1,108,1,108,1,108,1,108,1,109,1,109,1,109,1,109,5,109,
  	794,8,109,10,109,12,109,797,9,109,1,109,1,109,1,110,4,110,802,8,110,11,
  	110,12,110,803,1,111,1,111,1,111,1,111,1,112,1,112,1,112,5,112,813,8,
  	112,10,112,12,112,816,9,112,1,112,1,112,1,781,0,113,1,1,3,2,5,3,7,4,9,
  	5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
  	35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
  	29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
  	81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,
  	52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,
  	62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,143,
  	72,145,73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,161,81,163,
  	82,165,83,167,84,169,85,171,86,173,87,175,88,177,89,179,90,181,91,183,
  	92,185,93,187,94,189,95,191,96,193,97,195,98,197,99,199,100,201,0,203,
  	0,205,0,207,0,209,0,211,0,213,101,215,102,217,103,219,104,221,105,223,
  	106,225,107,1,0,11,2,0,65,90,97,122,3,0,48,57,65,90,97,122,1,0,49,57,
  	1,0,48,55,3,0,48,57,65,70,97,102,3,0,34,34,39,39,92,92,2,0,9,9,32,32,
  	2,0,10,10,13,13,1,0,48,57,2,0,34,34,39,39,2,0,34,34,92,92,837,0,1,1,0,
  	0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
  	1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
  	0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
  	0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
  	1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
  	0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
  	0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
  	1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,
  	0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,
  	0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,
  	0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,
  	0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,
  	0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,
  	0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,
  	0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,
  	0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,
  	0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,0,0,0,0,177,1,0,0,0,
  	0,179,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,0,185,1,0,0,0,0,187,1,0,0,0,
  	0,189,1,0,0,0,0,191,1,0,0,0,0,193,1,0,0,0,0,195,1,0,0,0,0,197,1,0,0,0,
  	0,199,1,0,0,0,0,213,1,0,0,0,0,215,1,0,0,0,0,217,1,0,0,0,0,219,1,0,0,0,
  	0,221,1,0,0,0,0,223,1,0,0,0,0,225,1,0,0,0,1,227,1,0,0,0,3,231,1,0,0,0,
  	5,236,1,0,0,0,7,242,1,0,0,0,9,247,1,0,0,0,11,253,1,0,0,0,13,258,1,0,0,
  	0,15,264,1,0,0,0,17,273,1,0,0,0,19,281,1,0,0,0,21,288,1,0,0,0,23,291,
  	1,0,0,0,25,296,1,0,0,0,27,301,1,0,0,0,29,309,1,0,0,0,31,315,1,0,0,0,33,
  	321,1,0,0,0,35,329,1,0,0,0,37,335,1,0,0,0,39,343,1,0,0,0,41,348,1,0,0,
  	0,43,351,1,0,0,0,45,358,1,0,0,0,47,365,1,0,0,0,49,369,1,0,0,0,51,380,
  	1,0,0,0,53,385,1,0,0,0,55,392,1,0,0,0,57,396,1,0,0,0,59,401,1,0,0,0,61,
  	408,1,0,0,0,63,417,1,0,0,0,65,426,1,0,0,0,67,434,1,0,0,0,69,444,1,0,0,
  	0,71,451,1,0,0,0,73,458,1,0,0,0,75,464,1,0,0,0,77,471,1,0,0,0,79,478,
  	1,0,0,0,81,484,1,0,0,0,83,491,1,0,0,0,85,500,1,0,0,0,87,505,1,0,0,0,89,
  	511,1,0,0,0,91,516,1,0,0,0,93,520,1,0,0,0,95,528,1,0,0,0,97,536,1,0,0,
  	0,99,541,1,0,0,0,101,547,1,0,0,0,103,549,1,0,0,0,105,551,1,0,0,0,107,
  	553,1,0,0,0,109,555,1,0,0,0,111,557,1,0,0,0,113,559,1,0,0,0,115,562,1,
  	0,0,0,117,564,1,0,0,0,119,566,1,0,0,0,121,568,1,0,0,0,123,570,1,0,0,0,
  	125,572,1,0,0,0,127,574,1,0,0,0,129,576,1,0,0,0,131,578,1,0,0,0,133,584,
  	1,0,0,0,135,586,1,0,0,0,137,588,1,0,0,0,139,591,1,0,0,0,141,593,1,0,0,
  	0,143,595,1,0,0,0,145,598,1,0,0,0,147,601,1,0,0,0,149,604,1,0,0,0,151,
  	607,1,0,0,0,153,610,1,0,0,0,155,613,1,0,0,0,157,616,1,0,0,0,159,619,1,
  	0,0,0,161,623,1,0,0,0,163,627,1,0,0,0,165,630,1,0,0,0,167,633,1,0,0,0,
  	169,636,1,0,0,0,171,644,1,0,0,0,173,650,1,0,0,0,175,652,1,0,0,0,177,655,
  	1,0,0,0,179,658,1,0,0,0,181,660,1,0,0,0,183,662,1,0,0,0,185,664,1,0,0,
  	0,187,666,1,0,0,0,189,668,1,0,0,0,191,672,1,0,0,0,193,675,1,0,0,0,195,
  	678,1,0,0,0,197,685,1,0,0,0,199,701,1,0,0,0,201,716,1,0,0,0,203,718,1,
  	0,0,0,205,720,1,0,0,0,207,752,1,0,0,0,209,754,1,0,0,0,211,756,1,0,0,0,
  	213,760,1,0,0,0,215,771,1,0,0,0,217,775,1,0,0,0,219,789,1,0,0,0,221,801,
  	1,0,0,0,223,805,1,0,0,0,225,809,1,0,0,0,227,228,5,97,0,0,228,229,5,115,
  	0,0,229,230,5,109,0,0,230,2,1,0,0,0,231,232,5,98,0,0,232,233,5,111,0,
  	0,233,234,5,111,0,0,234,235,5,108,0,0,235,4,1,0,0,0,236,237,5,98,0,0,
  	237,238,5,114,0,0,238,239,5,101,0,0,239,240,5,97,0,0,240,241,5,107,0,
  	0,241,6,1,0,0,0,242,243,5,99,0,0,243,244,5,97,0,0,244,245,5,115,0,0,245,
  	246,5,101,0,0,246,8,1,0,0,0,247,248,5,99,0,0,248,249,5,97,0,0,249,250,
  	5,116,0,0,250,251,5,99,0,0,251,252,5,104,0,0,252,10,1,0,0,0,253,254,5,
  	99,0,0,254,255,5,104,0,0,255,256,5,97,0,0,256,257,5,114,0,0,257,12,1,
  	0,0,0,258,259,5,99,0,0,259,260,5,108,0,0,260,261,5,97,0,0,261,262,5,115,
  	0,0,262,263,5,115,0,0,263,14,1,0,0,0,264,265,5,99,0,0,265,266,5,111,0,
  	0,266,267,5,110,0,0,267,268,5,116,0,0,268,269,5,105,0,0,269,270,5,110,
  	0,0,270,271,5,117,0,0,271,272,5,101,0,0,272,16,1,0,0,0,273,274,5,100,
  	0,0,274,275,5,101,0,0,275,276,5,102,0,0,276,277,5,97,0,0,277,278,5,117,
  	0,0,278,279,5,108,0,0,279,280,5,116,0,0,280,18,1,0,0,0,281,282,5,100,
  	0,0,282,283,5,101,0,0,283,284,5,108,0,0,284,285,5,101,0,0,285,286,5,116,
  	0,0,286,287,5,101,0,0,287,20,1,0,0,0,288,289,5,100,0,0,289,290,5,111,
  	0,0,290,22,1,0,0,0,291,292,5,101,0,0,292,293,5,108,0,0,293,294,5,115,
  	0,0,294,295,5,101,0,0,295,24,1,0,0,0,296,297,5,101,0,0,297,298,5,110,
  	0,0,298,299,5,117,0,0,299,300,5,109,0,0,300,26,1,0,0,0,301,302,5,101,
  	0,0,302,303,5,120,0,0,303,304,5,116,0,0,304,305,5,101,0,0,305,306,5,110,
  	0,0,306,307,5,100,0,0,307,308,5,115,0,0,308,28,1,0,0,0,309,310,5,102,
  	0,0,310,311,5,97,0,0,311,312,5,108,0,0,312,313,5,115,0,0,313,314,5,101,
  	0,0,314,30,1,0,0,0,315,316,5,102,0,0,316,317,5,105,0,0,317,318,5,110,
  	0,0,318,319,5,97,0,0,319,320,5,108,0,0,320,32,1,0,0,0,321,322,5,102,0,
  	0,322,323,5,105,0,0,323,324,5,110,0,0,324,325,5,97,0,0,325,326,5,108,
  	0,0,326,327,5,108,0,0,327,328,5,121,0,0,328,34,1,0,0,0,329,330,5,102,
  	0,0,330,331,5,108,0,0,331,332,5,111,0,0,332,333,5,97,0,0,333,334,5,116,
  	0,0,334,36,1,0,0,0,335,336,5,102,0,0,336,337,5,111,0,0,337,338,5,114,
  	0,0,338,339,5,101,0,0,339,340,5,97,0,0,340,341,5,99,0,0,341,342,5,104,
  	0,0,342,38,1,0,0,0,343,344,5,103,0,0,344,345,5,111,0,0,345,346,5,116,
  	0,0,346,347,5,111,0,0,347,40,1,0,0,0,348,349,5,105,0,0,349,350,5,102,
  	0,0,350,42,1,0,0,0,351,352,5,105,0,0,352,353,5,109,0,0,353,354,5,112,
  	0,0,354,355,5,111,0,0,355,356,5,114,0,0,356,357,5,116,0,0,357,44,1,0,
  	0,0,358,359,5,105,0,0,359,360,5,110,0,0,360,361,5,108,0,0,361,362,5,105,
  	0,0,362,363,5,110,0,0,363,364,5,101,0,0,364,46,1,0,0,0,365,366,5,105,
  	0,0,366,367,5,110,0,0,367,368,5,116,0,0,368,48,1,0,0,0,369,370,5,105,
  	0,0,370,371,5,109,0,0,371,372,5,112,0,0,372,373,5,108,0,0,373,374,5,101,
  	0,0,374,375,5,109,0,0,375,376,5,101,0,0,376,377,5,110,0,0,377,378,5,116,
  	0,0,378,379,5,115,0,0,379,50,1,0,0,0,380,381,5,108,0,0,381,382,5,111,
  	0,0,382,383,5,110,0,0,383,384,5,103,0,0,384,52,1,0,0,0,385,386,5,110,
  	0,0,386,387,5,97,0,0,387,388,5,116,0,0,388,389,5,105,0,0,389,390,5,118,
  	0,0,390,391,5,101,0,0,391,54,1,0,0,0,392,393,5,110,0,0,393,394,5,101,
  	0,0,394,395,5,119,0,0,395,56,1,0,0,0,396,397,5,110,0,0,397,398,5,117,
  	0,0,398,399,5,108,0,0,399,400,5,108,0,0,400,58,1,0,0,0,401,402,5,111,
  	0,0,402,403,5,98,0,0,403,404,5,106,0,0,404,405,5,101,0,0,405,406,5,99,
  	0,0,406,407,5,116,0,0,407,60,1,0,0,0,408,409,5,111,0,0,409,410,5,112,
  	0,0,410,411,5,101,0,0,411,412,5,114,0,0,412,413,5,97,0,0,413,414,5,116,
  	0,0,414,415,5,111,0,0,415,416,5,114,0,0,416,62,1,0,0,0,417,418,5,111,
  	0,0,418,419,5,118,0,0,419,420,5,101,0,0,420,421,5,114,0,0,421,422,5,114,
  	0,0,422,423,5,105,0,0,423,424,5,100,0,0,424,425,5,101,0,0,425,64,1,0,
  	0,0,426,427,5,112,0,0,427,428,5,114,0,0,428,429,5,105,0,0,429,430,5,118,
  	0,0,430,431,5,97,0,0,431,432,5,116,0,0,432,433,5,101,0,0,433,66,1,0,0,
  	0,434,435,5,112,0,0,435,436,5,114,0,0,436,437,5,111,0,0,437,438,5,116,
  	0,0,438,439,5,101,0,0,439,440,5,99,0,0,440,441,5,116,0,0,441,442,5,101,
  	0,0,442,443,5,100,0,0,443,68,1,0,0,0,444,445,5,112,0,0,445,446,5,117,
  	0,0,446,447,5,98,0,0,447,448,5,108,0,0,448,449,5,105,0,0,449,450,5,99,
  	0,0,450,70,1,0,0,0,451,452,5,114,0,0,452,453,5,101,0,0,453,454,5,116,
  	0,0,454,455,5,117,0,0,455,456,5,114,0,0,456,457,5,110,0,0,457,72,1,0,
  	0,0,458,459,5,115,0,0,459,460,5,104,0,0,460,461,5,111,0,0,461,462,5,114,
  	0,0,462,463,5,116,0,0,463,74,1,0,0,0,464,465,5,115,0,0,465,466,5,116,
  	0,0,466,467,5,97,0,0,467,468,5,116,0,0,468,469,5,105,0,0,469,470,5,99,
  	0,0,470,76,1,0,0,0,471,472,5,115,0,0,472,473,5,116,0,0,473,474,5,114,
  	0,0,474,475,5,105,0,0,475,476,5,110,0,0,476,477,5,103,0,0,477,78,1,0,
  	0,0,478,479,5,115,0,0,479,480,5,117,0,0,480,481,5,112,0,0,481,482,5,101,
  	0,0,482,483,5,114,0,0,483,80,1,0,0,0,484,485,5,115,0,0,485,486,5,119,
  	0,0,486,487,5,105,0,0,487,488,5,116,0,0,488,489,5,99,0,0,489,490,5,104,
  	0,0,490,82,1,0,0,0,491,492,5,116,0,0,492,493,5,101,0,0,493,494,5,109,
  	0,0,494,495,5,112,0,0,495,496,5,108,0,0,496,497,5,97,0,0,497,498,5,116,
  	0,0,498,499,5,101,0,0,499,84,1,0,0,0,500,501,5,116,0,0,501,502,5,104,
  	0,0,502,503,5,105,0,0,503,504,5,115,0,0,504,86,1,0,0,0,505,506,5,116,
  	0,0,506,507,5,104,0,0,507,508,5,114,0,0,508,509,5,111,0,0,509,510,5,119,
  	0,0,510,88,1,0,0,0,511,512,5,116,0,0,512,513,5,114,0,0,513,514,5,117,
  	0,0,514,515,5,101,0,0,515,90,1,0,0,0,516,517,5,116,0,0,517,518,5,114,
  	0,0,518,519,5,121,0,0,519,92,1,0,0,0,520,521,5,116,0,0,521,522,5,121,
  	0,0,522,523,5,112,0,0,523,524,5,101,0,0,524,525,5,100,0,0,525,526,5,101,
  	0,0,526,527,5,102,0,0,527,94,1,0,0,0,528,529,5,118,0,0,529,530,5,105,
  	0,0,530,531,5,114,0,0,531,532,5,116,0,0,532,533,5,117,0,0,533,534,5,97,
  	0,0,534,535,5,108,0,0,535,96,1,0,0,0,536,537,5,118,0,0,537,538,5,111,
  	0,0,538,539,5,105,0,0,539,540,5,100,0,0,540,98,1,0,0,0,541,542,5,119,
  	0,0,542,543,5,104,0,0,543,544,5,105,0,0,544,545,5,108,0,0,545,546,5,101,
  	0,0,546,100,1,0,0,0,547,548,5,40,0,0,548,102,1,0,0,0,549,550,5,41,0,0,
  	550,104,1,0,0,0,551,552,5,91,0,0,552,106,1,0,0,0,553,554,5,93,0,0,554,
  	108,1,0,0,0,555,556,5,123,0,0,556,110,1,0,0,0,557,558,5,125,0,0,558,112,
  	1,0,0,0,559,560,5,61,0,0,560,561,5,62,0,0,561,114,1,0,0,0,562,563,5,43,
  	0,0,563,116,1,0,0,0,564,565,5,45,0,0,565,118,1,0,0,0,566,567,5,42,0,0,
  	567,120,1,0,0,0,568,569,5,47,0,0,569,122,1,0,0,0,570,571,5,37,0,0,571,
  	124,1,0,0,0,572,573,5,94,0,0,573,126,1,0,0,0,574,575,5,38,0,0,575,128,
  	1,0,0,0,576,577,5,124,0,0,577,130,1,0,0,0,578,579,5,126,0,0,579,132,1,
  	0,0,0,580,585,5,33,0,0,581,582,5,110,0,0,582,583,5,111,0,0,583,585,5,
  	116,0,0,584,580,1,0,0,0,584,581,1,0,0,0,585,134,1,0,0,0,586,587,5,61,
  	0,0,587,136,1,0,0,0,588,589,5,58,0,0,589,590,5,61,0,0,590,138,1,0,0,0,
  	591,592,5,60,0,0,592,140,1,0,0,0,593,594,5,62,0,0,594,142,1,0,0,0,595,
  	596,5,43,0,0,596,597,5,61,0,0,597,144,1,0,0,0,598,599,5,45,0,0,599,600,
  	5,61,0,0,600,146,1,0,0,0,601,602,5,42,0,0,602,603,5,61,0,0,603,148,1,
  	0,0,0,604,605,5,47,0,0,605,606,5,61,0,0,606,150,1,0,0,0,607,608,5,37,
  	0,0,608,609,5,61,0,0,609,152,1,0,0,0,610,611,5,94,0,0,611,612,5,61,0,
  	0,612,154,1,0,0,0,613,614,5,38,0,0,614,615,5,61,0,0,615,156,1,0,0,0,616,
  	617,5,124,0,0,617,618,5,61,0,0,618,158,1,0,0,0,619,620,5,60,0,0,620,621,
  	5,60,0,0,621,622,5,61,0,0,622,160,1,0,0,0,623,624,5,62,0,0,624,625,5,
  	62,0,0,625,626,5,61,0,0,626,162,1,0,0,0,627,628,5,61,0,0,628,629,5,61,
  	0,0,629,164,1,0,0,0,630,631,5,33,0,0,631,632,5,61,0,0,632,166,1,0,0,0,
  	633,634,5,60,0,0,634,635,5,61,0,0,635,168,1,0,0,0,636,637,5,62,0,0,637,
  	638,5,61,0,0,638,170,1,0,0,0,639,640,5,38,0,0,640,645,5,38,0,0,641,642,
  	5,97,0,0,642,643,5,110,0,0,643,645,5,100,0,0,644,639,1,0,0,0,644,641,
  	1,0,0,0,645,172,1,0,0,0,646,647,5,124,0,0,647,651,5,124,0,0,648,649,5,
  	111,0,0,649,651,5,114,0,0,650,646,1,0,0,0,650,648,1,0,0,0,651,174,1,0,
  	0,0,652,653,5,43,0,0,653,654,5,43,0,0,654,176,1,0,0,0,655,656,5,45,0,
  	0,656,657,5,45,0,0,657,178,1,0,0,0,658,659,5,44,0,0,659,180,1,0,0,0,660,
  	661,5,63,0,0,661,182,1,0,0,0,662,663,5,58,0,0,663,184,1,0,0,0,664,665,
  	5,59,0,0,665,186,1,0,0,0,666,667,5,46,0,0,667,188,1,0,0,0,668,669,5,46,
  	0,0,669,670,5,46,0,0,670,671,5,46,0,0,671,190,1,0,0,0,672,673,5,60,0,
  	0,673,674,5,60,0,0,674,192,1,0,0,0,675,676,5,62,0,0,676,677,5,62,0,0,
  	677,194,1,0,0,0,678,682,7,0,0,0,679,681,7,1,0,0,680,679,1,0,0,0,681,684,
  	1,0,0,0,682,680,1,0,0,0,682,683,1,0,0,0,683,196,1,0,0,0,684,682,1,0,0,
  	0,685,686,5,95,0,0,686,687,5,95,0,0,687,688,5,99,0,0,688,689,5,111,0,
  	0,689,690,5,110,0,0,690,691,5,115,0,0,691,692,5,116,0,0,692,693,5,114,
  	0,0,693,694,5,117,0,0,694,695,5,99,0,0,695,696,5,116,0,0,696,697,5,111,
  	0,0,697,698,5,114,0,0,698,699,5,95,0,0,699,700,5,95,0,0,700,198,1,0,0,
  	0,701,702,5,95,0,0,702,703,5,95,0,0,703,704,5,100,0,0,704,705,5,101,0,
  	0,705,706,5,115,0,0,706,707,5,116,0,0,707,708,5,114,0,0,708,709,5,117,
  	0,0,709,710,5,99,0,0,710,711,5,116,0,0,711,712,5,111,0,0,712,713,5,114,
  	0,0,713,714,5,95,0,0,714,715,5,95,0,0,715,200,1,0,0,0,716,717,7,2,0,0,
  	717,202,1,0,0,0,718,719,7,3,0,0,719,204,1,0,0,0,720,721,7,4,0,0,721,206,
  	1,0,0,0,722,723,5,92,0,0,723,753,5,39,0,0,724,725,5,92,0,0,725,753,5,
  	34,0,0,726,727,5,92,0,0,727,753,5,63,0,0,728,729,5,92,0,0,729,753,5,92,
  	0,0,730,731,5,92,0,0,731,753,5,97,0,0,732,733,5,92,0,0,733,753,5,98,0,
  	0,734,735,5,92,0,0,735,753,5,102,0,0,736,737,5,92,0,0,737,753,5,110,0,
  	0,738,739,5,92,0,0,739,753,5,114,0,0,740,746,5,92,0,0,741,743,5,13,0,
  	0,742,744,5,10,0,0,743,742,1,0,0,0,743,744,1,0,0,0,744,747,1,0,0,0,745,
  	747,5,10,0,0,746,741,1,0,0,0,746,745,1,0,0,0,747,753,1,0,0,0,748,749,
  	5,92,0,0,749,753,5,116,0,0,750,751,5,92,0,0,751,753,5,118,0,0,752,722,
  	1,0,0,0,752,724,1,0,0,0,752,726,1,0,0,0,752,728,1,0,0,0,752,730,1,0,0,
  	0,752,732,1,0,0,0,752,734,1,0,0,0,752,736,1,0,0,0,752,738,1,0,0,0,752,
  	740,1,0,0,0,752,748,1,0,0,0,752,750,1,0,0,0,753,208,1,0,0,0,754,755,5,
  	45,0,0,755,210,1,0,0,0,756,757,5,92,0,0,757,758,7,5,0,0,758,212,1,0,0,
  	0,759,761,7,6,0,0,760,759,1,0,0,0,761,762,1,0,0,0,762,760,1,0,0,0,762,
  	763,1,0,0,0,763,764,1,0,0,0,764,765,6,106,0,0,765,214,1,0,0,0,766,768,
  	5,13,0,0,767,769,5,10,0,0,768,767,1,0,0,0,768,769,1,0,0,0,769,772,1,0,
  	0,0,770,772,5,10,0,0,771,766,1,0,0,0,771,770,1,0,0,0,772,773,1,0,0,0,
  	773,774,6,107,0,0,774,216,1,0,0,0,775,776,5,47,0,0,776,777,5,42,0,0,777,
  	781,1,0,0,0,778,780,9,0,0,0,779,778,1,0,0,0,780,783,1,0,0,0,781,782,1,
  	0,0,0,781,779,1,0,0,0,782,784,1,0,0,0,783,781,1,0,0,0,784,785,5,42,0,
  	0,785,786,5,47,0,0,786,787,1,0,0,0,787,788,6,108,0,0,788,218,1,0,0,0,
  	789,790,5,47,0,0,790,791,5,47,0,0,791,795,1,0,0,0,792,794,8,7,0,0,793,
  	792,1,0,0,0,794,797,1,0,0,0,795,793,1,0,0,0,795,796,1,0,0,0,796,798,1,
  	0,0,0,797,795,1,0,0,0,798,799,6,109,0,0,799,220,1,0,0,0,800,802,7,8,0,
  	0,801,800,1,0,0,0,802,803,1,0,0,0,803,801,1,0,0,0,803,804,1,0,0,0,804,
  	222,1,0,0,0,805,806,3,221,110,0,806,807,3,187,93,0,807,808,3,221,110,
  	0,808,224,1,0,0,0,809,814,7,9,0,0,810,813,3,211,105,0,811,813,8,10,0,
  	0,812,810,1,0,0,0,812,811,1,0,0,0,813,816,1,0,0,0,814,812,1,0,0,0,814,
  	815,1,0,0,0,815,817,1,0,0,0,816,814,1,0,0,0,817,818,7,9,0,0,818,226,1,
  	0,0,0,17,0,584,644,650,680,682,743,746,752,762,768,771,781,795,803,812,
  	814,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  dxxlexerLexerStaticData = staticData.release();
}

}

DXXLexer::DXXLexer(CharStream *input) : Lexer(input) {
  DXXLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *dxxlexerLexerStaticData->atn, dxxlexerLexerStaticData->decisionToDFA, dxxlexerLexerStaticData->sharedContextCache);
}

DXXLexer::~DXXLexer() {
  delete _interpreter;
}

std::string DXXLexer::getGrammarFileName() const {
  return "DXXLexer.g4";
}

const std::vector<std::string>& DXXLexer::getRuleNames() const {
  return dxxlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& DXXLexer::getChannelNames() const {
  return dxxlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& DXXLexer::getModeNames() const {
  return dxxlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& DXXLexer::getVocabulary() const {
  return dxxlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView DXXLexer::getSerializedATN() const {
  return dxxlexerLexerStaticData->serializedATN;
}

const atn::ATN& DXXLexer::getATN() const {
  return *dxxlexerLexerStaticData->atn;
}




void DXXLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  dxxlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(dxxlexerLexerOnceFlag, dxxlexerLexerInitialize);
#endif
}
